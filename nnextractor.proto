syntax = "proto3";

option optimize_for = CODE_SIZE;

package nnextractor;

enum NNTensorType {
  NNT_UNSPECIFIED = 0;

  NNT_BOOL = 1;
  NNT_INT8 = 2;
  NNT_INT16 = 3;
  NNT_INT32 = 4;
  NNT_INT64 = 5;
  NNT_FLOAT32 = 6;
  NNT_FLOAT64 = 7;
  NNT_FLOAT16 = 8;

  NNT_UINT8 = 9;
  NNT_UINT16 = 10;
  NNT_UINT32 = 11;
  NNT_UINT64 = 12;

  NNT_BFLOAT16 = 13;

  NNT_COMPLEX32 = 14;
  NNT_COMPLEX64 = 15;
  NNT_COMPLEX128 = 16;

  NNT_UQINT8 = 17;
  NNT_QINT8 = 18;
  NNT_QINT32 = 19;
  NNT_UQINT4 = 20;

  NNT_FLOAT8_E4M3FN = 21;
  NNT_FLOAT8_E5M2 = 22;
}

// nntensor
message NNTensor {
  repeated sint32 shape = 1;

  bytes the_bytes = 2;
}

enum PrimitiveType {
  P_UNSPECIFIED = 0;

  P_NULL = 1;

  P_BOOL = 4;
  P_STR = 5;
  P_F64 = 6;
  P_F32 = 7;
  P_I64 = 8;
  P_I32 = 9;
}

// Primitive is used for information not in the nn.
// Used in inputs, preprocess, postprocess, and outputs.
//
// For primitives, it is better to directly encoded in meta.
message Primitive {
  PrimitiveType the_type = 1;
  optional bool b = 2;
  optional string s = 3;
  optional double f64 = 4;
  optional float f32 = 5;
  optional sint64 i64 = 6;
  optional sint32 i32 = 7;
}

enum RecursivePrimitiveType {
  RP_UNSPECIFIED = 0;

  RP_PRIMITIVE = 1;

  RP_PRIMITIVES = 2;

  RP_PRIMITIVE_MAP = 3;

  RP_SLICE = 4;
}

// RecursivePrimitive
//
// not efficient encoding, but required as OpItem.op_params
message RecursivePrimitive {
  RecursivePrimitiveType the_type = 1;
  optional Primitive primitive = 2;
  repeated RecursivePrimitive primitives = 3;
  map<string, RecursivePrimitive> primitive_map = 4;
  repeated sint32 slice = 5;
}

message NII {
  NNTensor tensor = 1;

  repeated double origin = 2;

  // flattened [[0, 1, 2],
  //            [3, 4, 5],
  //            [6, 7, 8]]
  repeated double direction = 3;

  repeated double spacing = 4;

  // optional
  // flattened [[ 0,  1,  2,  3],
  //            [ 4,  5,  6,  7],
  //            [ 8,  9, 10, 11],
  //            [12, 13, 14, 15]]
  repeated double affine = 5;
}

// Op Type
//
// The type of the operations.
//
// OpType is defined in the item / record level.
enum OpType {
  O_UNSPECIFIED = 0;

  // https://journalofbigdata.springeropen.com/articles/10.1186/s40537-019-0197-0
  O_UNKNOWN = 1;
  O_OTHER = 2;
  O_NONE = 3;

  // cropping region (region: list[[start, stop, step]])
  O_CROP = 4;

  // padding region (region: list[[lower, upper]])
  O_PAD = 5;

  // flip axes (axes: list[int])
  O_FLIP = 6;

  // origin (origin: list[number])
  O_ORIGIN = 7;

  // spacing (spacing: list[number])
  O_SPACING = 8;

  // direction (direction: list[list[number]])
  O_DIRECTION = 9;

  // affine (affine: list[list[number]])
  O_AFFINE = 10;

  // geo-identity
  O_GEO_IDENTITY = 11;

  // unflip axes (axes: list[int])
  //     as inverse of flip.
  O_UNFLIP = 12;
}

// OpItem;
//
// have op_params optional due to inefficient encode.
//      possibly can be retrieved from metadata.
message OpItem {
  string name = 1;
  OpType op_type = 2;
  NNTensor tensor = 3;
  optional RecursivePrimitive op_params = 4;
}

// Item Type
//
// The type of the item.
// Item is presented as either single item,
// [same-kind] (list of same-kind items),
// or map<str, same-kind> (dictionary of same-kind items).
enum ItemType {
  I_UNSPECIFIED = 0;

  // I don't know the type,
  // or the types are complicated and I don't want to specify the type.
  // I'll just say it is a raw type.
  // Let the renderer does whatever it wants.
  // (Usually the renderer just presents the data as ndarray)
  I_RAW = 1;

  // I know the type,
  // but it is not listed in the following settings.
  I_OTHER = 2;

  // nntensor
  I_NNTENSOR = 3;

  // NII type (with origin, spacing, direction, affine)
  I_NII = 4;

  // 2D-image
  I_IMAGE = 5;

  // audio (can be presented as sound, or time-domain presentation)
  I_AUDIO = 6;

  // spectrogram
  I_SPECTROGRAM = 7;

  // text
  I_TEXT = 8;

  // number
  I_NUMBER = 9;

  // text or number
  I_TEXT_NUMBER = 10;

  // null
  I_NULL = 11;

  // list of items
  I_LIST = 12;

  // map of items
  I_MAP = 13;

  // op-item
  I_OP_ITEM = 14;
}

// Item is presented as either single item,
// [same-kind] (list of same-kind items),
// or map<str, same-kind> (dictionary of same-kind items).
message Item {
  // name
  string name = 1;

  // type
  ItemType the_type = 2;

  // other type
  optional string other_type = 3;

  optional Primitive primitive = 4;

  optional NNTensor tensor = 5;

  optional NII nii = 6;

  repeated Item the_list = 7;

  map<string, Item> the_map = 8;

  optional OpItem op_item = 9;
}

message Items {
  string name = 1;
  repeated Item items = 2;
}

enum NNRecordType {
  NNR_UNSPECIFIED = 0;

  // np.ndarray
  NNR_ARRAY = 1;

  // list / tuple
  NNR_LIST = 3;

  // dictionary / map for np.ndarray
  NNR_MAP = 4;

  // meta (if we do not want to store the whole ndarray (ex: inputs))
  NNR_META = 5;

  NNR_OP_ITEM = 6;
}

message NNRecordMeta {
  repeated sint32 shape = 1;
  NNTensorType the_type = 2;
}

// NNRecord
//
// The very fundamental object representing record using np.ndarray,
// NNRecord[], or {key: NNRecord}.
//
// By default. the OpType of the NNRecord is to scale from the input-images.
//    (The scaling is supposed to be from previous layer, but there are
//    floating-point precision issue.)
message NNRecord {
  // name of the record
  // optionally already named in the parent class. (NNNode or Parameter)
  optional string name = 1;

  NNRecordType the_type = 2;

  // nntensor
  optional NNTensor tensor = 3;

  // NNRecord[]
  repeated NNRecord records = 4;

  // {key: NNRecord}
  map<string, NNRecord> the_map = 5;

  optional NNRecordMeta meta = 6;

  optional OpItem op_item = 7;
}

// NNParameter
message NNParameter {
  // parameter name
  string name = 1;

  // parameter
  NNRecord parameter = 2;
}

// NNNode
//
// The nn-node represents the following computation:
//
//   activation = f(input_0, input_1, ...)
//
// The procedure of each nn-node is as follow:
//   1. taking inputs
//   2. processing with internal parameters.
//   3. producing 1 activation.
//   4. output to the children.
message NNNode {
  // name
  string name = 1;

  // input
  repeated NNRecord inputs = 2;

  // parameters
  repeated NNParameter params = 3;

  // activation
  optional NNRecord activation = 4;

  repeated NNRecord gradient_inputs = 5;

  repeated NNParameter gradient_params = 6;

  repeated NNRecord gradients = 7;

  // the following activation nodes
  repeated NNNode children = 8;
}

enum TaskflowType {
  T_UNSPECIFIED = 0;

  T_INPUT = 1;

  T_PREPROCESS = 2;

  T_FORWARD = 3;

  T_BACKWARD = 4;

  T_POSTPROCESS = 5;

  T_OUTPUT = 6;

  T_EXTRACTOR = 7;
}

message Taskflow {
  TaskflowType the_type = 1;
  int64 flow_id = 2;

  optional string name = 3;
}

// NNExtractor
//
// A full NNExtractor setup includes:
//   1. a bunch of inputs.
//   2. optionally preprocessed inputs.
//   3. put the preprocessed inputs into the models, generating the
//   activations.
//   4. optionally postprocessed results of the activations.
//   5. integrated outputs.
//
//   6. a list of NNExtractor setup.
message NNExtractor {
  string name = 1;

  repeated Taskflow taskflow = 2;

  repeated Items inputs = 3;
  repeated Items preprocesses = 4;
  repeated NNNode nodes = 5;
  repeated Items postprocesses = 6;
  repeated Items outputs = 7;
  repeated NNNode forwards = 8;
  repeated NNNode backwards = 9;

  repeated NNExtractor extractors = 10;
}
